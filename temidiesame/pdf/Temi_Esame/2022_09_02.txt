#01 = HEAP

20 = 20
32 = 32 20
19 = 32 20 19
51 = 51 32 19 20
** = 32 20 19
** = 20 19
28 = 28 19 20
** = 20 19
74 = 74 19 20
09 = 74 19 20 09
81 = 81 74 20 09 19
** = 74 19 20 09
** = 20 19 09
17 = 20 19 09 17
** = 19 17 09
41 = 41 19 09 17

All'inserzione di 28 =
    28 19 20

All'inserzione di 81 =
    81 74 20 09 19

All'inserzione di 41 =
    41 19 09 17
--------------------

#02 = ALBERO DA VISITE

DX = 5 3 1 20 9
SX = 47 13 18 16 21

                            60
            30                              13
    3               20              47              16
5       1               9                       18      21

20:
    SX = Z
    DX = 9
13:
    SX = 47
    DX = 16
3:
    SX = 5
    DX = 1

--------------------

#03 = DOUBLE HASHING

h(k) = k%23    |   h'(k) = 1 + k%97
Vengono scelte queste due funzioni di hash perché la prima è coerente con la dimensione 
della tabella, portando ad avere ogni cella potenzialmente riempita, mentre la seconda 
non può mai essere nulla, che è una caratteristica richiesta per il double hashing, e il
modulo utilizzato nella seconda è primo rispetto a quello utilizzato nella prima.

33 = 
    h(33) = 33%23 = 10

    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                                            33

263 =
    h(263) = 263%23 = 10
    h'(263) = [h(263) + (1 + 263%97)%23]%23 = 11

    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                                            33  263

109 = 
    h(109) = 109%23 = 17
    
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                                            33  263                     109

144 = 
    h(144) = 144%23 = 6
    
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                            144             33  263                     109

100 =
    h(100) = 100%23 = 8
    
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                            144     100     33  263                     109

113 = 
    h(113) = 113%23 = 21
    
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                            144     100     33  263                     109             113

86 =
    h(86) = 86%23 = 17
    h'(86) = [h(86) + (1 + 86%97)%23]%23 = 12

    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                            144     100     33  263 86                  109             113

159 =
    h(159) = 159%23 = 21
    h'(159) = [h(159) + (1 + 159%97)%23]%23 = 15

    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
                            144     100     33  263 86          159     109             113

58 =
    h(58) = 58%23 = 12
    h'(58) = [h(58) + (1 + 58%97)%23]%23 = 2
    
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
            58              144     100     33  263 86          159     109             113

La cella 12 contiene la chiave 86.

--------------------

#04 = ORDER-STATISTIC BST

Le informazioni da aggiungere sono i nodi sentinella ad ogni foglia che non ha un
ramo sinistro o destro e la cardinalità di ogni albero.

La radice conterrà:
    LEFT = 40
    RIGHT = 80
    CARDINALITA' = 12

Il nodo con chiave 50 conterrà:
    LEFT = Z
    RIGHT = 55
    CARDINALITA' = 2

Archi percorsi per cercare la chiave di rango 4 =
    70  40  50
    Chiave di rango 4 = 50

--------------------

#05 = ORDINAMENTO TOPOLOGICO DAG

V1 = 0/11
V2 = 12/13
V3 = 1/10
V4 = 2/7
V5 = 8/9
V6 = 3/6
V7 = 4/5

--------------------

#06 = ALGORITMO DI KRUSKAL

Passo 1 = 
    Archi considerati =
        A - B: 2
        C - E: 2
    Archi scelti = 
        A - B
        C - E

Passo 2 = 
    Archi considerati =
        A - D: 3
        F - H: 3
    Archi scelti = 
        A - D
        F - H
    
Passo 3 = 
    Archi considerati =
        F - G: 4
    Archi scelti = 
        F - G

Passo 4 = 
    Archi considerati =
        A - E: 5
        C - H: 5
    Archi scelti = 
        A - E
        C - H

Passo 5 = 
    Archi considerati =
        C - I: 6
    Archi scelti = 
        C - I

Terminato


